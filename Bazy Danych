SQL - Structured Query Language - STRUKTURALNY JĘZYK ZAPYTAŃ

1. Jakie znasz pojęcia klucza w teorii relacyjnych baz danych? Jakie słowa w SQL służą do zaznaczenia klucza?
- Klucz główny, kandydujący (w SQLu: PRIMARY KEY)
- Klucz obcy, (w SQLu: FOREIGN KEY)

2. Jakie znasz warunki poprawności (więzy) dla tabel bazy danych?
- CHECK (price > 0)
- CHECK (discounted_price > 0 AND price > discounted_price)

3. Omów pojęcie transakcji, jakie są główne własności transakcji, podaj przykłady negatywnych zjawisk gdy nie zastosowano transakcji.
Transakcja to niepodzielna jednostka działań:
- albo wykonają się wszystkie operacje w transakcji, albo żadna
- nowe wartości muszą być zatwierdzone COMMIT
- transakcja zajmuje zero czasu

Własności transakcji jest 4: ACID
- A - Atomic - atomowa, niepodzielna = transakcja ma być wykonana w całości albo wcale
- C - Consistency - spójna = po zatwierdzeniu (lub cofnięciu) transakcji baza danych jest spójna jak przed transakcją
- I - Isolated - odizolowana = traktowana jak by była jedyną transakcją w systemie
- D - Durable - trwała = jeśli transakcja zakończy się pomyślnie, to jej wyniki nie mogą zostać utracone z powodu awarii systemu

Negatywnym zjawiskiem może być np. odczyt klienta, który chciał sprawdzić cenę maksymalną i minimalną czegoś co było/jest w bazie,
ale w tym czasie administrator bazy dokonał aktualizacji bazy i wyniki dla klienta mogą być niespodziewane.

#PRZYKŁAD:

BATONIK cena = 2 zł
BOMBONIERKA cena = 30 zł
Po Update administratora:
BATONIK cena = 3 zł
BOMBONIERKA cena = 15 zł

SCENARIUSZ 1:
Klient odpala polecenie: SELECT min(cena), max(cena) FROM towar;
W dokładnie tym samym momencie Administrator bazy aktualizuje ceny produktów poleceniami:
UPDATE towar SET cena=3 WHERE nazwa LIKE '%BATONIK%';
UPDATE towar SET cena=15 WHERE nazwa LIKE '%BOMBONIERKA%';
Wynik zapytania klienta może być różny, ponieważ może częściowo pochodzić sprzed aktualizacji ceny jak i po aktualizacji ceny.

      |   Klient   |   Administrator   |
----------------------------------------
0 min |  min(cena) |   update(cena)    |
      |  max(cena) |                   |
      |  WYNIK:    |                   |
      |  min = 2   |                   |
      |  max = 15  |                   |


Gdyby była uruchomiona transakcja:

SCENARIUSZ 2:
Klient odpala polecenie: SELECT min(cena), max(cena) FROM towar;
Otrzymuje wynik: min = 2 i max = 30 
Chwilę później Administrator odpala transakcję poleceniem BEGIN;
      W TYM MOMENCIE KLIENT POSTANAWIA PONOWNIE ODPALIĆ POLECENIE: SELECT min(cena), max(cena) FROM towar;
      PONOWNIE OTRZYMUJE WYNIK: min = 2 i max = 30 
W tym czasie administrator aktualizuje ceny produktów:
UPDATE towar SET cena=3 WHERE nazwa LIKE '%BATONIK%';
UPDATE towar SET cena=15 WHERE nazwa LIKE '%BOMBONIERKA%';
a na końcu zatwierdza wprowadzone zmiany poleceniem COMMIT;
      KLIENT POSTANAWIA TRZECI RAZ SPRAWDZIĆ CENY PRODUKTÓW: SELECT min(cena), max(cena) FROM towar;
      OTRZYMUJE NOWY WYNIK: min = 3 i max = 15

      |   Klient   |   Administrator   |
----------------------------------------
0 min |  min(cena) |                   |
      |  max(cena) |                   |
      |  WYNIK:    |                   |
      |  min = 2   |                   |
      |  max = 30  |                   |
----------------------------------------
1 min |  min(cena) |      BEGIN        |
      |  max(cena) |   update(cena)    |
      |  WYNIK:    |                   |
      |  min = 2   |                   |
      |  max = 30  |                   |      
      |            |      COMMIT       |
----------------------------------------
2 min |  min(cena) |                   |
      |  max(cena) |                   |
      |  WYNIK:    |                   |
      |  min = 3   |                   |
      |  max = 15  |                   |
      

4. Jakie są negatywne strony istnienia redundancji w bazie danych. Podaj przykłady. Jakie są sposoby zwalczania redundancji?
Jeden z celów, który staramy się osiągnąć podczas projektowania schematu bazy danych to unikanie redundancji (nadmiarowości).
Redundancja oznacza, że niektóre informacje są zapisane w bazie danych wielokrotnie.
Prowadzi to do anomalii podczas modyfikacji i usuwania

- REDUNDANCJA oznacza nadmiarowość, czyli powtarzalność danych,
- aktualizacja (modyfikacja) wartości powtarzającej się w innych encjach nie aktualizuje jej w tych encjach,

5. Co to jest Normalizacja ?
Normalizacja to proces, służący do przekształcenia schematu zawierającego redundancję w schemat, który jej nie zawiera.
Zależnie od potrzeb określa się różne poziomy normalizacji — zakresy usuwania redundancji, nazywane postaciami normalnymi.

Można wyszczególnić kilka postaci normalnych:
- 1NF (1 Normal Form)
      Warunkiem pierwszej postaci normalnej jest to, by każdy atrybut w relacji przyjmował tylko wartości niepodzielne
      Np. imię i nazwisko ma być oddzielnie:
      
            PRZED NORMALIZACJĄ                                                            PO NORMALIZACJI DO 1NF
      
      imie i nazwisko | data_urodzenia                                             imie  |  nazwisko  | data_urodzenia
      --------------------------------                   ---->                     -----------------------------------
       Jan Kowalski   |  1980-10-15                                                 Jan  |  Kowalski  |  1980-10-15
       Ola Nowak      |  1990-05-06                                                 Ola  |  Nowak     |  1990-05-06
       

- 2NF
      Aby stwierdzić, czy relacja będąca w pierwszej postaci normalnej jest także w drugiej, należy określić klucze relacji.
      Warunkiem na drugą postać normalną jest to, aby każdy niekluczowy atrybut zależał funkcyjnie od całego klucza.
      Niedozwolone są więc tzw. zależności częściowe.
      
      PRZED NORMALIZACJĄ                                                           
      
      imie  |  nazwisko  | data_urodzenia |   płeć   |  stanowisko  | płaca/h                            
      -----------------------------------------------------------------------                 
       Jan  |  Kowalski  |  1980-10-15    |  męska   |  listonosz   |   18                                      
       Ola  |  Nowak     |  1990-05-06    |  żeńska  |  kucharka    |   15   
       Ala  |  Kowal     |  1991-06-20    |  żeńska  |  kucharka    |   15
       
       
      PO NORMALIZACJI
       
      imie  |  nazwisko  | data_urodzenia |  stanowisko  | płaca/h                            
      ------------------------------------------------------------              
       Jan  |  Kowalski  |  1980-10-15    |  listonosz   |   18                                      
       Ola  |  Nowak     |  1990-05-06    |  kucharka    |   15   
       Ala  |  Kowal     |  1991-06-20    |  kucharka    |   15
      
      
      imie  |  płeć
      ----------------
       Jan  |  męska
       Ola  |  żeńska
       Ala  |  żeńska
      
      
- 3NF (najczęściej używana)
      Dla sprawdzenia, czy relacja będąca w drugiej postaci normalnej jest także w trzeciej,
      bada się zależności między atrybutami niekluczowymi.
      Atrybuty niekluczowe powinny zależeć funkcyjnie wyłącznie od klucza i niczego więcej.
      Wykluczamy w ten sposób zależności przechodnie.
      
      PRZED NORMALIZACJĄ
       
      imie  |  nazwisko  | data_urodzenia |  stanowisko  | płaca/h                            
      ------------------------------------------------------------              
       Jan  |  Kowalski  |  1980-10-15    |  listonosz   |   18                                      
       Ola  |  Nowak     |  1990-05-06    |  kucharka    |   15   
       Ala  |  Kowal     |  1991-06-20    |  kucharka    |   15
      
      
      PO NORMALIZACJI
       
      imie  |  nazwisko  | data_urodzenia |  stanowisko                         
      --------------------------------------------------              
       Jan  |  Kowalski  |  1980-10-15    |  listonosz                                   
       Ola  |  Nowak     |  1990-05-06    |  kucharka   
       Ala  |  Kowal     |  1991-06-20    |  kucharka 
       
       
      stanowisko | płaca/h
      --------------------
      listonosz  |   18
      kucharka   |   15
      
      
- 3.5NF
- 4NF
- 5NF

6. W jaki sposób język SQL realizuje operację rzutu relacji a w jaki sposób realizuje operację wyboru (obcięcia) relacji? Jakie jeszcze znasz operacje i ich sposób realizacji w SQL?
- operacja rzutu, wyciąga wybrane kolumny z danymi w tabeli:
  SELECT imie, nazwisko FROM klient;
  
- operacja obcięcia, wyciąga wybraną encję z tabeli:
  SELECT * FROM klient WHERE id=2;
  
- operacja złączenia:
  SELECT imie, nazwisko, zamowienie.nr AS zamowienie_nr
  FROM klient, zamowienie
  WHERE klient.nr=zamowienie.klient_nr;
  
- operacja złączenia (lepsza wersja):
  SELECT imie, nazwisko, zamowienie.nr AS zamowienie_nr
  FROM klient INNER JOIN zamowienie ON klient.nr=zamowienie.klient_nr;
  
- samozłączenie:
  SELECT Z1.nr AS zam1, Z2.nr AS zam2, Z2.klient_nr
  FROM zamowienie AS Z1, zamowienie Z2
  WHERE Z1.klient_nr=Z2.klient_nr AND Z1.nr < Z2.nr;
  
- grupowanie:
  SELECT nazwisko FROM klient GROUP BY nazwisko HAVING count(nazwisko) > 1;

- zagnieżdżenie nieskorelowane:
  SELECT imie, nazwisko, miasto
  FROM klient
  WHERE nazwisko IN (SELECT nazwisko FROM klient GROUP BY nazwisko HAVING count(nazwisko) > 1);
  
- zagnieżdżenie skorelowane:
  SELECT imie, nazwisko
  FROM klient
  WHERE NOT EXISTS
    (SELECT *
     FROM zamowienie INNER JOIN pozycja
     ON klient.nr=zamowienie.klient_nr
        AND zamowienie.nr=pozycja.zamowienie_nr);

7. Podaj trzy rodzaje związków rozpatrywane w teorii relacyjnych baz danych. W jaki sposób są one realizowane w języku SQL?
- związek jeden do jeden -|-----|-    TABELA_1 -|-----|- TABELA_2
  - tworzymy dwie tabele,
  - w pierwszej jest klucz główny PRIMARY KEY,
  - w drugiej tabeli jest klucz główny PRIMARY KEY, który jest zarazem kluczem obcym FOREIGN KEY
  
- związek jeden do wiele -|-----<     TABELA_1 -|-----< TABELA_2
  - tworzymy dwie tabele,
  - w pierwszej tabeli (po stronie JEDEN) jest klucz główny PRIMARY KEY,
  - w drugiej tabeli (po stronie WIELE) jest klucz główny PRIMARY KEY oraz klucz obcy FOREIGN KEY,
    który jest adresatem klucza głównego pierwszej tabeli
  
- związek wiele do wiele >-----<      TABELA_1 -|-----< TABELA_2 >-----|- TABELA_3
  - tworzymy trzy tabele,
  - pierwsza tabela (po stronie JEDEN) ma klucz główny PRIMARY KEY,
  - druga tabela (po stronie WIELE) jest tabelą pośredniczącą pomiędzy tabelą pierwszą i trzecią,
    są w niej klucze obce FOREIGN KEY, które są adresatami kluczy głównych tabeli pierwszej oraz tabeli trzeciej,
    klucz główny PRIMARY KEY nie jest wymagany,
  - trzecia tabela (po stronie JEDEN) ma klucz główny PRIMARY KEY

8. Jakie problemy stwarza usuwanie w obecności klucza obcego, jakie istnieją rozwiązania?
  Usuwanie w obecności klucza obcego hamuje usuwanie danych ponieważ dane które chce się usunąć są powiązane relacją z danymi w innej tabeli.
  Aby umożliwić usunięcie trzeba dodać podczas tworzenia tabeli z kluczem obcym deklaracji:
  - ON DELETE CASCADE
  - ON DELETE SET NULL
  - ON DELETE NO ACTION
  na samym końcu tworzenia tabeli.
